// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/api/pipes"
	"github.com/concourse/atc/db"
)

type FakePipeDB struct {
	CreatePipeStub        func(pipeGUID string, url string) error
	createPipeMutex       sync.RWMutex
	createPipeArgsForCall []struct {
		pipeGUID string
		url      string
	}
	createPipeReturns struct {
		result1 error
	}
	GetPipeStub        func(pipeGUID string) (db.Pipe, error)
	getPipeMutex       sync.RWMutex
	getPipeArgsForCall []struct {
		pipeGUID string
	}
	getPipeReturns struct {
		result1 db.Pipe
		result2 error
	}
}

func (fake *FakePipeDB) CreatePipe(pipeGUID string, url string) error {
	fake.createPipeMutex.Lock()
	fake.createPipeArgsForCall = append(fake.createPipeArgsForCall, struct {
		pipeGUID string
		url      string
	}{pipeGUID, url})
	fake.createPipeMutex.Unlock()
	if fake.CreatePipeStub != nil {
		return fake.CreatePipeStub(pipeGUID, url)
	} else {
		return fake.createPipeReturns.result1
	}
}

func (fake *FakePipeDB) CreatePipeCallCount() int {
	fake.createPipeMutex.RLock()
	defer fake.createPipeMutex.RUnlock()
	return len(fake.createPipeArgsForCall)
}

func (fake *FakePipeDB) CreatePipeArgsForCall(i int) (string, string) {
	fake.createPipeMutex.RLock()
	defer fake.createPipeMutex.RUnlock()
	return fake.createPipeArgsForCall[i].pipeGUID, fake.createPipeArgsForCall[i].url
}

func (fake *FakePipeDB) CreatePipeReturns(result1 error) {
	fake.CreatePipeStub = nil
	fake.createPipeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipeDB) GetPipe(pipeGUID string) (db.Pipe, error) {
	fake.getPipeMutex.Lock()
	fake.getPipeArgsForCall = append(fake.getPipeArgsForCall, struct {
		pipeGUID string
	}{pipeGUID})
	fake.getPipeMutex.Unlock()
	if fake.GetPipeStub != nil {
		return fake.GetPipeStub(pipeGUID)
	} else {
		return fake.getPipeReturns.result1, fake.getPipeReturns.result2
	}
}

func (fake *FakePipeDB) GetPipeCallCount() int {
	fake.getPipeMutex.RLock()
	defer fake.getPipeMutex.RUnlock()
	return len(fake.getPipeArgsForCall)
}

func (fake *FakePipeDB) GetPipeArgsForCall(i int) string {
	fake.getPipeMutex.RLock()
	defer fake.getPipeMutex.RUnlock()
	return fake.getPipeArgsForCall[i].pipeGUID
}

func (fake *FakePipeDB) GetPipeReturns(result1 db.Pipe, result2 error) {
	fake.GetPipeStub = nil
	fake.getPipeReturns = struct {
		result1 db.Pipe
		result2 error
	}{result1, result2}
}

var _ pipes.PipeDB = new(FakePipeDB)
