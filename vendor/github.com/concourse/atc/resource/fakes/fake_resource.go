// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/concourse/atc"
	"github.com/concourse/atc/resource"
	"github.com/concourse/atc/worker"
)

type FakeResource struct {
	GetStub        func(resource.IOConfig, atc.Source, atc.Params, atc.Version) resource.VersionedSource
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 resource.IOConfig
		arg2 atc.Source
		arg3 atc.Params
		arg4 atc.Version
	}
	getReturns struct {
		result1 resource.VersionedSource
	}
	PutStub        func(resource.IOConfig, atc.Source, atc.Params, resource.ArtifactSource) resource.VersionedSource
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		arg1 resource.IOConfig
		arg2 atc.Source
		arg3 atc.Params
		arg4 resource.ArtifactSource
	}
	putReturns struct {
		result1 resource.VersionedSource
	}
	CheckStub        func(atc.Source, atc.Version) ([]atc.Version, error)
	checkMutex       sync.RWMutex
	checkArgsForCall []struct {
		arg1 atc.Source
		arg2 atc.Version
	}
	checkReturns struct {
		result1 []atc.Version
		result2 error
	}
	ReleaseStub        func(*time.Duration)
	releaseMutex       sync.RWMutex
	releaseArgsForCall []struct {
		arg1 *time.Duration
	}
	CacheVolumeStub        func() (worker.Volume, bool)
	cacheVolumeMutex       sync.RWMutex
	cacheVolumeArgsForCall []struct{}
	cacheVolumeReturns     struct {
		result1 worker.Volume
		result2 bool
	}
}

func (fake *FakeResource) Get(arg1 resource.IOConfig, arg2 atc.Source, arg3 atc.Params, arg4 atc.Version) resource.VersionedSource {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 resource.IOConfig
		arg2 atc.Source
		arg3 atc.Params
		arg4 atc.Version
	}{arg1, arg2, arg3, arg4})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1, arg2, arg3, arg4)
	} else {
		return fake.getReturns.result1
	}
}

func (fake *FakeResource) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeResource) GetArgsForCall(i int) (resource.IOConfig, atc.Source, atc.Params, atc.Version) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].arg1, fake.getArgsForCall[i].arg2, fake.getArgsForCall[i].arg3, fake.getArgsForCall[i].arg4
}

func (fake *FakeResource) GetReturns(result1 resource.VersionedSource) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 resource.VersionedSource
	}{result1}
}

func (fake *FakeResource) Put(arg1 resource.IOConfig, arg2 atc.Source, arg3 atc.Params, arg4 resource.ArtifactSource) resource.VersionedSource {
	fake.putMutex.Lock()
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		arg1 resource.IOConfig
		arg2 atc.Source
		arg3 atc.Params
		arg4 resource.ArtifactSource
	}{arg1, arg2, arg3, arg4})
	fake.putMutex.Unlock()
	if fake.PutStub != nil {
		return fake.PutStub(arg1, arg2, arg3, arg4)
	} else {
		return fake.putReturns.result1
	}
}

func (fake *FakeResource) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *FakeResource) PutArgsForCall(i int) (resource.IOConfig, atc.Source, atc.Params, resource.ArtifactSource) {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return fake.putArgsForCall[i].arg1, fake.putArgsForCall[i].arg2, fake.putArgsForCall[i].arg3, fake.putArgsForCall[i].arg4
}

func (fake *FakeResource) PutReturns(result1 resource.VersionedSource) {
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 resource.VersionedSource
	}{result1}
}

func (fake *FakeResource) Check(arg1 atc.Source, arg2 atc.Version) ([]atc.Version, error) {
	fake.checkMutex.Lock()
	fake.checkArgsForCall = append(fake.checkArgsForCall, struct {
		arg1 atc.Source
		arg2 atc.Version
	}{arg1, arg2})
	fake.checkMutex.Unlock()
	if fake.CheckStub != nil {
		return fake.CheckStub(arg1, arg2)
	} else {
		return fake.checkReturns.result1, fake.checkReturns.result2
	}
}

func (fake *FakeResource) CheckCallCount() int {
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	return len(fake.checkArgsForCall)
}

func (fake *FakeResource) CheckArgsForCall(i int) (atc.Source, atc.Version) {
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	return fake.checkArgsForCall[i].arg1, fake.checkArgsForCall[i].arg2
}

func (fake *FakeResource) CheckReturns(result1 []atc.Version, result2 error) {
	fake.CheckStub = nil
	fake.checkReturns = struct {
		result1 []atc.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeResource) Release(arg1 *time.Duration) {
	fake.releaseMutex.Lock()
	fake.releaseArgsForCall = append(fake.releaseArgsForCall, struct {
		arg1 *time.Duration
	}{arg1})
	fake.releaseMutex.Unlock()
	if fake.ReleaseStub != nil {
		fake.ReleaseStub(arg1)
	}
}

func (fake *FakeResource) ReleaseCallCount() int {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	return len(fake.releaseArgsForCall)
}

func (fake *FakeResource) ReleaseArgsForCall(i int) *time.Duration {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	return fake.releaseArgsForCall[i].arg1
}

func (fake *FakeResource) CacheVolume() (worker.Volume, bool) {
	fake.cacheVolumeMutex.Lock()
	fake.cacheVolumeArgsForCall = append(fake.cacheVolumeArgsForCall, struct{}{})
	fake.cacheVolumeMutex.Unlock()
	if fake.CacheVolumeStub != nil {
		return fake.CacheVolumeStub()
	} else {
		return fake.cacheVolumeReturns.result1, fake.cacheVolumeReturns.result2
	}
}

func (fake *FakeResource) CacheVolumeCallCount() int {
	fake.cacheVolumeMutex.RLock()
	defer fake.cacheVolumeMutex.RUnlock()
	return len(fake.cacheVolumeArgsForCall)
}

func (fake *FakeResource) CacheVolumeReturns(result1 worker.Volume, result2 bool) {
	fake.CacheVolumeStub = nil
	fake.cacheVolumeReturns = struct {
		result1 worker.Volume
		result2 bool
	}{result1, result2}
}

var _ resource.Resource = new(FakeResource)
