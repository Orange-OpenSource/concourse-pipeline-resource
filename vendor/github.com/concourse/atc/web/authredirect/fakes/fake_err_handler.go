// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"sync"

	"github.com/concourse/atc/web/authredirect"
)

type FakeErrHandler struct {
	ServeHTTPStub        func(w http.ResponseWriter, r *http.Request) error
	serveHTTPMutex       sync.RWMutex
	serveHTTPArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	serveHTTPReturns struct {
		result1 error
	}
}

func (fake *FakeErrHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) error {
	fake.serveHTTPMutex.Lock()
	fake.serveHTTPArgsForCall = append(fake.serveHTTPArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.serveHTTPMutex.Unlock()
	if fake.ServeHTTPStub != nil {
		return fake.ServeHTTPStub(w, r)
	} else {
		return fake.serveHTTPReturns.result1
	}
}

func (fake *FakeErrHandler) ServeHTTPCallCount() int {
	fake.serveHTTPMutex.RLock()
	defer fake.serveHTTPMutex.RUnlock()
	return len(fake.serveHTTPArgsForCall)
}

func (fake *FakeErrHandler) ServeHTTPArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.serveHTTPMutex.RLock()
	defer fake.serveHTTPMutex.RUnlock()
	return fake.serveHTTPArgsForCall[i].w, fake.serveHTTPArgsForCall[i].r
}

func (fake *FakeErrHandler) ServeHTTPReturns(result1 error) {
	fake.ServeHTTPStub = nil
	fake.serveHTTPReturns = struct {
		result1 error
	}{result1}
}

var _ authredirect.ErrHandler = new(FakeErrHandler)
