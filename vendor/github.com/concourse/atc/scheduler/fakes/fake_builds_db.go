// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/scheduler"
	"github.com/pivotal-golang/lager"
)

type FakeBuildsDB struct {
	LeaseBuildSchedulingStub        func(logger lager.Logger, buildID int, interval time.Duration) (db.Lease, bool, error)
	leaseBuildSchedulingMutex       sync.RWMutex
	leaseBuildSchedulingArgsForCall []struct {
		logger   lager.Logger
		buildID  int
		interval time.Duration
	}
	leaseBuildSchedulingReturns struct {
		result1 db.Lease
		result2 bool
		result3 error
	}
	ErrorBuildStub        func(buildID int, pipelineID int, err error) error
	errorBuildMutex       sync.RWMutex
	errorBuildArgsForCall []struct {
		buildID    int
		pipelineID int
		err        error
	}
	errorBuildReturns struct {
		result1 error
	}
	FinishBuildStub        func(int, int, db.Status) error
	finishBuildMutex       sync.RWMutex
	finishBuildArgsForCall []struct {
		arg1 int
		arg2 int
		arg3 db.Status
	}
	finishBuildReturns struct {
		result1 error
	}
	GetBuildPreparationStub        func(buildID int) (db.BuildPreparation, bool, error)
	getBuildPreparationMutex       sync.RWMutex
	getBuildPreparationArgsForCall []struct {
		buildID int
	}
	getBuildPreparationReturns struct {
		result1 db.BuildPreparation
		result2 bool
		result3 error
	}
}

func (fake *FakeBuildsDB) LeaseBuildScheduling(logger lager.Logger, buildID int, interval time.Duration) (db.Lease, bool, error) {
	fake.leaseBuildSchedulingMutex.Lock()
	fake.leaseBuildSchedulingArgsForCall = append(fake.leaseBuildSchedulingArgsForCall, struct {
		logger   lager.Logger
		buildID  int
		interval time.Duration
	}{logger, buildID, interval})
	fake.leaseBuildSchedulingMutex.Unlock()
	if fake.LeaseBuildSchedulingStub != nil {
		return fake.LeaseBuildSchedulingStub(logger, buildID, interval)
	} else {
		return fake.leaseBuildSchedulingReturns.result1, fake.leaseBuildSchedulingReturns.result2, fake.leaseBuildSchedulingReturns.result3
	}
}

func (fake *FakeBuildsDB) LeaseBuildSchedulingCallCount() int {
	fake.leaseBuildSchedulingMutex.RLock()
	defer fake.leaseBuildSchedulingMutex.RUnlock()
	return len(fake.leaseBuildSchedulingArgsForCall)
}

func (fake *FakeBuildsDB) LeaseBuildSchedulingArgsForCall(i int) (lager.Logger, int, time.Duration) {
	fake.leaseBuildSchedulingMutex.RLock()
	defer fake.leaseBuildSchedulingMutex.RUnlock()
	return fake.leaseBuildSchedulingArgsForCall[i].logger, fake.leaseBuildSchedulingArgsForCall[i].buildID, fake.leaseBuildSchedulingArgsForCall[i].interval
}

func (fake *FakeBuildsDB) LeaseBuildSchedulingReturns(result1 db.Lease, result2 bool, result3 error) {
	fake.LeaseBuildSchedulingStub = nil
	fake.leaseBuildSchedulingReturns = struct {
		result1 db.Lease
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildsDB) ErrorBuild(buildID int, pipelineID int, err error) error {
	fake.errorBuildMutex.Lock()
	fake.errorBuildArgsForCall = append(fake.errorBuildArgsForCall, struct {
		buildID    int
		pipelineID int
		err        error
	}{buildID, pipelineID, err})
	fake.errorBuildMutex.Unlock()
	if fake.ErrorBuildStub != nil {
		return fake.ErrorBuildStub(buildID, pipelineID, err)
	} else {
		return fake.errorBuildReturns.result1
	}
}

func (fake *FakeBuildsDB) ErrorBuildCallCount() int {
	fake.errorBuildMutex.RLock()
	defer fake.errorBuildMutex.RUnlock()
	return len(fake.errorBuildArgsForCall)
}

func (fake *FakeBuildsDB) ErrorBuildArgsForCall(i int) (int, int, error) {
	fake.errorBuildMutex.RLock()
	defer fake.errorBuildMutex.RUnlock()
	return fake.errorBuildArgsForCall[i].buildID, fake.errorBuildArgsForCall[i].pipelineID, fake.errorBuildArgsForCall[i].err
}

func (fake *FakeBuildsDB) ErrorBuildReturns(result1 error) {
	fake.ErrorBuildStub = nil
	fake.errorBuildReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildsDB) FinishBuild(arg1 int, arg2 int, arg3 db.Status) error {
	fake.finishBuildMutex.Lock()
	fake.finishBuildArgsForCall = append(fake.finishBuildArgsForCall, struct {
		arg1 int
		arg2 int
		arg3 db.Status
	}{arg1, arg2, arg3})
	fake.finishBuildMutex.Unlock()
	if fake.FinishBuildStub != nil {
		return fake.FinishBuildStub(arg1, arg2, arg3)
	} else {
		return fake.finishBuildReturns.result1
	}
}

func (fake *FakeBuildsDB) FinishBuildCallCount() int {
	fake.finishBuildMutex.RLock()
	defer fake.finishBuildMutex.RUnlock()
	return len(fake.finishBuildArgsForCall)
}

func (fake *FakeBuildsDB) FinishBuildArgsForCall(i int) (int, int, db.Status) {
	fake.finishBuildMutex.RLock()
	defer fake.finishBuildMutex.RUnlock()
	return fake.finishBuildArgsForCall[i].arg1, fake.finishBuildArgsForCall[i].arg2, fake.finishBuildArgsForCall[i].arg3
}

func (fake *FakeBuildsDB) FinishBuildReturns(result1 error) {
	fake.FinishBuildStub = nil
	fake.finishBuildReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildsDB) GetBuildPreparation(buildID int) (db.BuildPreparation, bool, error) {
	fake.getBuildPreparationMutex.Lock()
	fake.getBuildPreparationArgsForCall = append(fake.getBuildPreparationArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getBuildPreparationMutex.Unlock()
	if fake.GetBuildPreparationStub != nil {
		return fake.GetBuildPreparationStub(buildID)
	} else {
		return fake.getBuildPreparationReturns.result1, fake.getBuildPreparationReturns.result2, fake.getBuildPreparationReturns.result3
	}
}

func (fake *FakeBuildsDB) GetBuildPreparationCallCount() int {
	fake.getBuildPreparationMutex.RLock()
	defer fake.getBuildPreparationMutex.RUnlock()
	return len(fake.getBuildPreparationArgsForCall)
}

func (fake *FakeBuildsDB) GetBuildPreparationArgsForCall(i int) int {
	fake.getBuildPreparationMutex.RLock()
	defer fake.getBuildPreparationMutex.RUnlock()
	return fake.getBuildPreparationArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) GetBuildPreparationReturns(result1 db.BuildPreparation, result2 bool, result3 error) {
	fake.GetBuildPreparationStub = nil
	fake.getBuildPreparationReturns = struct {
		result1 db.BuildPreparation
		result2 bool
		result3 error
	}{result1, result2, result3}
}

var _ scheduler.BuildsDB = new(FakeBuildsDB)
