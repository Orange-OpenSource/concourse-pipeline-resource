// This file was generated by counterfeiter
package fakes

import (
	"io"
	"net/http"
	"sync"

	"github.com/concourse/atc/worker/transport"
	"github.com/tedsuo/rata"
)

type FakeRequestGenerator struct {
	CreateRequestStub        func(name string, params rata.Params, body io.Reader) (*http.Request, error)
	createRequestMutex       sync.RWMutex
	createRequestArgsForCall []struct {
		name   string
		params rata.Params
		body   io.Reader
	}
	createRequestReturns struct {
		result1 *http.Request
		result2 error
	}
}

func (fake *FakeRequestGenerator) CreateRequest(name string, params rata.Params, body io.Reader) (*http.Request, error) {
	fake.createRequestMutex.Lock()
	fake.createRequestArgsForCall = append(fake.createRequestArgsForCall, struct {
		name   string
		params rata.Params
		body   io.Reader
	}{name, params, body})
	fake.createRequestMutex.Unlock()
	if fake.CreateRequestStub != nil {
		return fake.CreateRequestStub(name, params, body)
	} else {
		return fake.createRequestReturns.result1, fake.createRequestReturns.result2
	}
}

func (fake *FakeRequestGenerator) CreateRequestCallCount() int {
	fake.createRequestMutex.RLock()
	defer fake.createRequestMutex.RUnlock()
	return len(fake.createRequestArgsForCall)
}

func (fake *FakeRequestGenerator) CreateRequestArgsForCall(i int) (string, rata.Params, io.Reader) {
	fake.createRequestMutex.RLock()
	defer fake.createRequestMutex.RUnlock()
	return fake.createRequestArgsForCall[i].name, fake.createRequestArgsForCall[i].params, fake.createRequestArgsForCall[i].body
}

func (fake *FakeRequestGenerator) CreateRequestReturns(result1 *http.Request, result2 error) {
	fake.CreateRequestStub = nil
	fake.createRequestReturns = struct {
		result1 *http.Request
		result2 error
	}{result1, result2}
}

var _ transport.RequestGenerator = new(FakeRequestGenerator)
