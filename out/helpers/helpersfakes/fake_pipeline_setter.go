// This file was generated by counterfeiter
package helpersfakes

import (
	"sync"

	"github.com/concourse/fly/template"
	"github.com/robdimsdale/concourse-pipeline-resource/out/helpers"
)

type FakePipelineSetter struct {
	SetPipelineStub        func(pipelineName string, configPath string, templateVariables template.Variables, templateVariablesFiles []string) error
	setPipelineMutex       sync.RWMutex
	setPipelineArgsForCall []struct {
		pipelineName           string
		configPath             string
		templateVariables      template.Variables
		templateVariablesFiles []string
	}
	setPipelineReturns struct {
		result1 error
	}
	invocations map[string][][]interface{}
}

func (fake *FakePipelineSetter) SetPipeline(pipelineName string, configPath string, templateVariables template.Variables, templateVariablesFiles []string) error {
	var templateVariablesFilesCopy []string
	if templateVariablesFiles != nil {
		templateVariablesFilesCopy = make([]string, len(templateVariablesFiles))
		copy(templateVariablesFilesCopy, templateVariablesFiles)
	}
	fake.setPipelineMutex.Lock()
	fake.setPipelineArgsForCall = append(fake.setPipelineArgsForCall, struct {
		pipelineName           string
		configPath             string
		templateVariables      template.Variables
		templateVariablesFiles []string
	}{pipelineName, configPath, templateVariables, templateVariablesFilesCopy})
	fake.guard("SetPipeline")
	fake.invocations["SetPipeline"] = append(fake.invocations["SetPipeline"], []interface{}{pipelineName, configPath, templateVariables, templateVariablesFilesCopy})
	fake.setPipelineMutex.Unlock()
	if fake.SetPipelineStub != nil {
		return fake.SetPipelineStub(pipelineName, configPath, templateVariables, templateVariablesFiles)
	} else {
		return fake.setPipelineReturns.result1
	}
}

func (fake *FakePipelineSetter) SetPipelineCallCount() int {
	fake.setPipelineMutex.RLock()
	defer fake.setPipelineMutex.RUnlock()
	return len(fake.setPipelineArgsForCall)
}

func (fake *FakePipelineSetter) SetPipelineArgsForCall(i int) (string, string, template.Variables, []string) {
	fake.setPipelineMutex.RLock()
	defer fake.setPipelineMutex.RUnlock()
	return fake.setPipelineArgsForCall[i].pipelineName, fake.setPipelineArgsForCall[i].configPath, fake.setPipelineArgsForCall[i].templateVariables, fake.setPipelineArgsForCall[i].templateVariablesFiles
}

func (fake *FakePipelineSetter) SetPipelineReturns(result1 error) {
	fake.SetPipelineStub = nil
	fake.setPipelineReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelineSetter) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *FakePipelineSetter) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}

var _ helpers.PipelineSetter = new(FakePipelineSetter)
