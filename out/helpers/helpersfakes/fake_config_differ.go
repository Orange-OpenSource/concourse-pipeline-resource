// This file was generated by counterfeiter
package helpersfakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/robdimsdale/concourse-pipeline-resource/out/helpers"
)

type FakeConfigDiffer struct {
	DiffStub        func(existingConfig atc.Config, newConfig atc.Config) error
	diffMutex       sync.RWMutex
	diffArgsForCall []struct {
		existingConfig atc.Config
		newConfig      atc.Config
	}
	diffReturns struct {
		result1 error
	}
	invocations map[string][][]interface{}
}

func (fake *FakeConfigDiffer) Diff(existingConfig atc.Config, newConfig atc.Config) error {
	fake.diffMutex.Lock()
	fake.diffArgsForCall = append(fake.diffArgsForCall, struct {
		existingConfig atc.Config
		newConfig      atc.Config
	}{existingConfig, newConfig})
	fake.guard("Diff")
	fake.invocations["Diff"] = append(fake.invocations["Diff"], []interface{}{existingConfig, newConfig})
	fake.diffMutex.Unlock()
	if fake.DiffStub != nil {
		return fake.DiffStub(existingConfig, newConfig)
	} else {
		return fake.diffReturns.result1
	}
}

func (fake *FakeConfigDiffer) DiffCallCount() int {
	fake.diffMutex.RLock()
	defer fake.diffMutex.RUnlock()
	return len(fake.diffArgsForCall)
}

func (fake *FakeConfigDiffer) DiffArgsForCall(i int) (atc.Config, atc.Config) {
	fake.diffMutex.RLock()
	defer fake.diffMutex.RUnlock()
	return fake.diffArgsForCall[i].existingConfig, fake.diffArgsForCall[i].newConfig
}

func (fake *FakeConfigDiffer) DiffReturns(result1 error) {
	fake.DiffStub = nil
	fake.diffReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfigDiffer) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *FakeConfigDiffer) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}

var _ helpers.ConfigDiffer = new(FakeConfigDiffer)
